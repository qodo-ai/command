[commands.qodo-release-notes]
# Available tools for this command
available_tools = ["filesystem", "shell", "sequential-thinking"]

arguments = [
    { name = "target_tag", type = "string", required = false, description = "Tag we're preparing notes for (blank = HEAD draft)", default = "HEAD" },
    { name = "notes_file", type = "string", required = false, description = "Path to notes file (default RELEASE_NOTES.md)", default = "RELEASE_NOTES.md" }
]

# MCP server configuration for shell access
mcpServers = """
{
    "shell": {
        "command": "uvx",
        "args": ["mcp-shell-server"],
        "env": {
            "ALLOW_COMMANDS": "gh,ls,cat,pwd,rg,wc,touch,find,mkdir,rm,cp,mv,npm,npx,jest,mocha,ts-node,tsc,node,jq,echo,test,diff,sed,awk,git,cd,exit,yarn,grep,bash,go"
        }
    },
    "filesystem": {
        "command": "npx",
        "args": ["-y", "@modelcontextprotocol/server-filesystem", "/"]
    },
    "sequential-thinking": {
        "command": "npx",
        "args": [
            "-y",
            "@modelcontextprotocol/server-sequential-thinking"
        ]
    }
}
"""

# Detailed instructions for the agent
instructions = """
# 📝 Qodo “release-notes” Agent - Operating Spec
_A single self-contained routine: detect tag range → update file → commit → push → PR._

## Your Task
Update **RELEASE_NOTES.md** with everything merged since the previous tag,
then stage the file, commit, and open a PR.

## Inputs (key-value pairs)
| key          | description                                                 |
|--------------|-------------------------------------------------------------|
| `target_tag` | Tag we're preparing notes for (**blank = `HEAD` draft**).   |
| `notes_file` | Path to notes file (default `RELEASE_NOTES.md`).            |

Environment: `git`, `gh`, `jq`; `$GITHUB_TOKEN` already exported in the workflow.

---

## Algorithm (bash-style pseudocode)

```bash
set -euo pipefail

# 0. Setup -----------------------------------------------------------------------------
NOTES_FILE="${notes_file:-RELEASE_NOTES.md}"
TARGET_TAG="${target_tag:-HEAD}"
git config user.name  "qodo-bot"
git config user.email "qodo-bot@users.noreply.github.com"

# 1. Find previous tag -----------------------------------------------------------------
PREV_TAG=$(git describe --tags --abbrev=0 "$TARGET_TAG"^ 2>/dev/null || true)
RANGE="$([[ -n $PREV_TAG ]] && echo "$PREV_TAG..$TARGET_TAG" || echo "$TARGET_TAG")"

# 2. Collect merged PRs in range --------------------------------------------------------
COMMIT_LIST=$(git log --merges --pretty="%H" $RANGE)
PR_NUMS=$(for c in $COMMIT_LIST; do gh pr view "$(gh pr list --search "$c" -q '.[0].number')" --json number -q '.number'; done | sort -u)

[ -z "$PR_NUMS" ] && echo "No PRs in range – exiting." && exit 0

# 3. Build section grouped by label -----------------------------------------------------
TMP_SECT=$(mktemp)
for PR in $PR_NUMS; do
  gh pr view "$PR" --json title,labels,url,number | jq -r '
    def cat:
      if (.labels[].name|test("feat|enhancement"))       then "✨ Features"
      elif (.labels[].name|test("fix"))                  then "🐞 Fixes"
      else "🧹 House-keeping" end;
    cat as $cat
    | [$cat, "* \\(.title) (#\\(.number)) - \\(.url)"] | @tsv' 
done | sort | awk -F'\t' '
  BEGIN{sec=""}
  {
    if ($1!=sec) {print "\n### "$1; sec=$1}
    print $2
  }' > "$TMP_SECT"

# 4. Insert new section at top of notes file -------------------------------------------
DATE=$(date +%F)
{
  printf "## %s - %s\n" "$TARGET_TAG" "$DATE"
  cat "$TMP_SECT"
  echo
  [ -f "$NOTES_FILE" ] && cat "$NOTES_FILE"
} > /tmp/notes && mv /tmp/notes "$NOTES_FILE"

# 5. Commit, push, open PR --------------------------------------------------------------
BRANCH="chore/release-notes-${GITHUB_RUN_ID:-manual}-$(date +%s)"
git checkout -b "$BRANCH"
git add "$NOTES_FILE"
git commit -m "docs: update release notes for $TARGET_TAG"
git push --set-upstream origin "$BRANCH"

gh pr create \
  --title  "docs: Release notes for $TARGET_TAG" \
  --body   "Automated update via Release Notes agent 🤖" \
  --head   "$BRANCH" \
  --base   "$(git symbolic-ref --short refs/remotes/origin/HEAD | cut -d/ -f2)"
```

*(Exit codes ensure the workflow passes even when no changes are needed.)*
"""