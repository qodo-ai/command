name: 'Qodo Gen CLI Action'
description: 'Run Qodo Gen CLI agents with custom TOML and MCP configurations'
author: 'Qodo'

inputs:
  prompt:
    description: 'The prompt or command to run with Qodo'
    required: true
  model:
    description: 'Specify a custom model to use'
    required: false
  agent-file:
    description: 'Path to custom agent.toml file (defaults to the example agent.toml included with this action)'
    required: false
  mcp-file:
    description: 'Path to custom mcp.json file (defaults to the example mcp.json included with this action)'
    required: false
  set-args:
    description: 'Additional arguments in --set format (e.g., "--set commandArg1=commandVal1 --set commandArg2=commandVal2")'
    required: false
  qodo-version:
    description: 'Version of @qodo/gen to install (defaults to 0.1.122)'
    required: false
    default: 'latest'

runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies
      shell: bash
      run: |
        # Verify npx is available (should be installed with Node.js)
        if ! command -v npx &> /dev/null; then
          echo "Error: npx is not available. This should have been installed with Node.js."
          exit 1
        else
          echo "npx is available: $(npx --version)"
        fi
        
        # Install uv (which includes uvx)
        if ! command -v uvx &> /dev/null; then
          echo "Installing uv..."
          curl -LsSf https://astral.sh/uv/install.sh | sh
          # Add uv to PATH for all subsequent steps
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          # Add to PATH for the current step
          export PATH="$HOME/.local/bin:$PATH"
          # Verify installation
          if command -v uvx &> /dev/null; then
            echo "uvx is now available: $(uvx --version)"
          else
            echo "Error: Failed to install uvx"
            exit 1
          fi
        else
          echo "uvx is already available: $(uvx --version)"
        fi

    - name: Install Qodo CLI
      shell: bash
      run: |
        if [ "${{ inputs.qodo-version }}" = "latest" ]; then
          npm install -g @qodo/gen
        else
          npm install -g @qodo/gen@${{ inputs.qodo-version }}
        fi

    - name: Run Qodo Command
      shell: bash
      run: |
        # Build the command
        QODO_CMD="qodo --ci"
        
        # Add model if specified
        if [ ! -z "${{ inputs.model }}" ]; then
          QODO_CMD="$QODO_CMD --model=${{ inputs.model }}"
        fi
        
        # Add agent-file - handle both new and old parameter names for backward compatibility
        AGENT_FILE=""
        if [ ! -z "${{ inputs.agent-file }}" ]; then
          AGENT_FILE="${{ inputs.agent-file }}"
        elif [ ! -z "${{ inputs.agentfile }}" ]; then
          echo "::warning::The 'agentfile' input is deprecated. Please use 'agent-file' instead."
          AGENT_FILE="${{ inputs.agentfile }}"
        fi
        
        if [ ! -z "$AGENT_FILE" ]; then
          QODO_CMD="$QODO_CMD --agent-file=$AGENT_FILE"
        else
          # Use default agent-file from action directory
          QODO_CMD="$QODO_CMD --agent-file=${{ github.action_path }}/examples/agent.toml"
        fi
        
        # Add set arguments if specified
        if [ ! -z "${{ inputs.set-args }}" ]; then
          QODO_CMD="$QODO_CMD ${{ inputs.set-args }}"
        fi
        
        # Add the prompt at the end
        QODO_CMD="$QODO_CMD \"${{ inputs.prompt }}\""
        
        # Echo the command for debugging
        echo "Running: $QODO_CMD"
        
        # Execute the command
        eval $QODO_CMD

branding:
  icon: 'cpu'
  color: 'blue'
